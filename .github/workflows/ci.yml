# Workflow label
name: CI

# Workflow trigger
on: [push, pull_request]

# Workflow tasks
jobs:
  # Apply lint, check formatting
  lint:
    name: "Lint (${{matrix.os}}, Python ${{ matrix.python-version }})"
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2022]
        # python-version: ['3.8','3.9', '3.10']
        python-version: ['3.10']

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install platform-specific requirements (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev gir1.2-gtk-3.0 python3-gi python3-gi-cairo

       # brew is very slow sometimes. TODO: speedup brew by using caching.
      - name: Install platform-specific requirements (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install pygobject3 gtk+3 cairo py3cairo pkg-config

      - name: Install Python requirements
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Running flake8
        run: flake8 pyonfx
      
      - name: Running mypy
        run: mypy pyonfx --python-version ${{ matrix.python-version }}

      # - name: Cancelling pipeline (failed)
      #   if: failure()
      #   uses: andymckay/cancel-action@0.2

  # Execute pytest to check PyonFX's functionalities
  test:
    name: "Test (${{matrix.os}}, Python ${{ matrix.python-version }})"
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8','3.9', '3.10']

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install platform-specific requirements (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev gir1.2-gtk-3.0 python3-gi python3-gi-cairo

       # brew is very slow sometimes. TODO: speedup brew by using caching.
      - name: Install platform-specific requirements (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install pygobject3 gtk+3 cairo py3cairo pkg-config

      - name: Install fonts (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          GO111MODULE=on GOBIN=$HOME/.local/bin go get github.com/Crosse/font-install@v1.4.1
          $HOME/.local/bin/font-install "https://osdn.net/frs/redir.php?m=gigenet&f=mix-mplus-ipa%2F58720%2Fmigu-1p-20130430.zip"

        shell: bash
      - name: Install fonts (Windows)
        if: matrix.os == 'windows-latest'
        run: ./.github/scripts/install-fonts.ps1 'https://osdn.net/frs/redir.php?m=gigenet&f=mix-mplus-ipa%2F58720%2Fmigu-1p-20130430.zip'
        shell: pwsh

      - name: Install Python requirements
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Test
        run: PANGOCAIRO_BACKEND=fc pytest
        shell: bash

  # Build the package and publish it on PyPi
  build-n-publish:
    needs: [lint, test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    
    name: "Build and publish distributions to PyPI and TestPyPI"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install pypa/build
        run: python -m pip install build --user

      - name: Build a binary wheel and a source tarball
        run: python -m build --sdist --wheel --outdir dist/ .

      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
